<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is subject to the terms and conditions defined in the
files 'LICENSE' and 'NOTICE', which are part of this source
code package.
-->

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/services.xsd">

    <description>Content Component Services</description>
    <vendor>Ilscipio GmbH</vendor>

    <!-- ========================================================= -->
    <!-- Indexing -->
    <!-- ========================================================= -->

    <service name="scheduleEntityIndexing" engine="java" location="com.ilscipio.scipio.solr.EntityIndexer" invoke="scheduleEntityIndexing"
             use-transaction="false" log="quiet" log-eca="quiet"><!-- sync service -->
        <description>Registers entity ID or values for indexing queueing at the end of the transaction or immediately if no transaction. Replaces registerUpdateToSolr.</description>
        <attribute mode="IN" name="event" type="String" optional="true" default-value="trans-commit">
            <description>Supported: trans-commit (default - appends to transaction, only indexes if committed), global-queue (skips transaction queue and appends to global EntityIndexer queue)</description>
        </attribute>
        <attribute mode="IN" name="entityName" type="String" optional="true"/><!-- NOTE: Technically usually required -->
        <attribute mode="IN" name="idField" type="Object" optional="true"/>
        <attribute mode="IN" name="relationName" type="String" optional="true"/>
        <attribute mode="IN" name="topics" type="Collection" optional="true">
            <description>Names of subscriber topics to limit which subscribers are triggered</description>
        </attribute>
        <attribute mode="IN" name="action" type="String" optional="true"><!-- default-value="auto" -->
            <description>Supported values: add (same as addToSolr), remove (same as removeFromSolr),
                auto (default - this either adds or removes based on whether or not the productId still exists in the database)</description>
        </attribute>
        <attribute mode="IN" name="instance" type="Map" optional="true"/><!-- type="org.ofbiz.entity.GenericEntity" -->
        <attribute mode="IN" name="id" type="String" optional="true"/>
        <attribute mode="IN" name="entitiesToIndex" type="Object" optional="true">
            <description>Map of entity names to ordered maps of entity PKs to EntityIndexer.Entry instances, used for trans-commit event</description>
        </attribute>
    </service>

    <service name="runEntityIndexing" engine="java" location="com.ilscipio.scipio.solr.EntityIndexer" invoke="runEntityIndexing"
             use-transaction="false" log="quiet"><!-- async service -->
        <description>Processes entity ID or values for indexing from EntityIndexer global queue
            NOTE: There is only ever one implementation running for each entity at a time, internally locked.</description>
        <attribute mode="IN" name="entityName" type="String" optional="true"/>
        <attribute mode="IN" name="entityNames" type="Collection" optional="true"/>
    </service>

    <service name="scheduleProductIndexing" engine="java" location="com.ilscipio.scipio.solr.EntityIndexer" invoke="scheduleEntityIndexing"
             use-transaction="false" log="quiet" log-eca="quiet"><!-- async service -->
        <description>Registers product ID or values for indexing queueing at the end of the transaction or immediately if no transaction. Replaces registerUpdateToSolr.</description>
        <implements service="scheduleEntityIndexing"/>
        <override name="entityName" optional="true" default-value="Product"/>
        <override name="idField" type="String" optional="true" default-value="productId"/>
        <attribute mode="IN" name="productId" optional="true" type="String"/>
        <attribute mode="IN" name="updateVariants" optional="true" type="Boolean" default-value="false">
            <description>If true, also update the variant products immediately associated to this one (added 2018-07-19).
                (NOTE: ignored if effective action is product removal)</description>
        </attribute>
        <attribute mode="IN" name="updateVariantsDeep" optional="true" type="Boolean" default-value="false">
            <description>If true, also update the variant products associated to this one (added 2018-07-19), and their variants, etc.
                (NOTE: ignored if effective action is product removal)</description>
        </attribute>
        <attribute mode="IN" name="updateVirtual" optional="true" type="Boolean" default-value="false">
            <description>If true, also update the virtual product immediately associated to this one (added 2018-07-25).
                (NOTE: ignored if effective action is product removal)</description>
        </attribute>
        <attribute mode="IN" name="updateVirtualDeep" optional="true" type="Boolean" default-value="false">
            <description>If true, also update the virtual product associated to this one (added 2018-07-25), and its virtuals, etc.
                (NOTE: ignored if effective action is product removal)</description>
        </attribute>
    </service>

    
    <service name="updateToSolr" engine="java" location="com.ilscipio.scipio.solr.SolrProductSearch" invoke="updateToSolr"
        transaction-timeout="72000" priority="90">
        <description>Immediately adds OR removes product to/from solr index by product instance or by productId - intended for use with ECAs/SECAs,
            automatically called by registerUpdateToSolr</description>
        <implements service="updateToSolrSingleInterface"/>
        <implements service="updateToSolrMultiInterface"/>
        <implements service="updateToSolrControlInterface"/>
    </service>
    <service name="addToSolr" engine="java" location="com.ilscipio.scipio.solr.SolrProductSearch" invoke="addToSolr"
        transaction-timeout="72000">
        <description>Immediately adds product to solr index by product instance or by productId, manual helper - NOT intended for use with ECAs/SECAs anymore (use registerUpdateToSolr/updateToSolr)</description>
        <implements service="updateToSolrSingleInterface"/>
        <!--<implements service="updateToSolrControlInterface"/>-->
        <override name="action" default-value="add"/>
    </service>
    <service name="removeFromSolr" engine="java" location="com.ilscipio.scipio.solr.SolrProductSearch" invoke="removeFromSolr" 
        transaction-timeout="72000">
        <description>Immediately removes product from solr index by product instance or by productId, manual helper - NOT intended for use with ECAs/SECAs anymore (use registerUpdateToSolr/updateToSolr)</description>
        <implements service="updateToSolrSingleInterface"/>
        <!--<implements service="updateToSolrControlInterface"/>-->
        <override name="action" default-value="remove"/>
    </service>

    <service name="registerUpdateToSolr" engine="java" location="com.ilscipio.scipio.solr.SolrProductSearch" invoke="registerUpdateToSolr"
        use-transaction="false" log="quiet" log-eca="quiet"><!-- must not force transaction; special behavior -->
        <description>Registers (queues) a product add or removal to/from solr index by product instance or by productId - intended for use with ECAs/SECAs
            - delays the solr index update (updateToSolr) to the current transaction's global-commit</description>
        <!-- NOTE: As of 2017-12, registerUpdateToSolr is the only service that the solr ECAs should invoke (NOT updateToSolr/addToSolr/remoteFromSolr).
            "action" should be left to "auto".
            This is a SPECIAL ENTITY ENGINE implementation: it behaves like a "global-commit" service ECA, such that
            it simply queues the add/removal (updateToSolr) to happen at global transaction commit instead of immediately;
            if there is no transaction, behavior is controlled by the "noTransMode" parameter. 
            NOTE: 2018-02: The ofbiz "global-commit" - and registerUpdateToSolr - calls the update service AFTER the parent transaction has been committed;
                this means that an error in the update service can currently NOT rollback the global transaction;
                the default updateToSolr handles this by marking the Solr data dirty in SolrStatus entity, for a rebuildSolrIndex call to fix later on. 
            TODO?: FUTURE: ofbiz patch to support global-commits before transaction commits in case needed, and option on registerUpdateToSolr interface. -->
        <implements service="updateToSolrSingleInterface"/>
        <implements service="updateToSolrControlInterface"/>
        <attribute mode="IN" name="noTransMode" optional="true" type="String" default-value="update">
            <description>Determines what to do if no transaction is in place.
                Supported values: update (adds/remove to solr immediately even if no tx), mark-dirty (marks solr data dirty, IF not in manual mode).</description>
        </attribute>
        <attribute mode="IN" name="updateSrv" optional="true" type="String">
            <description>Name of service implementing updateToSolr's interface to delegate to for the solr index update.
                Default: value of solrconfig.properties/solr.service.registerUpdateToSolr.updateSrv, or updateToSolr.</description>
        </attribute>
    </service>

    <!-- ========================================================= -->
    <!-- Dispatching -->
    <!-- ========================================================= -->

    <service name="entityIndexingConsumer" engine="interface">
        <attribute mode="IN" name="docs" type="Collection" optional="true">
            <description>Collection of EntityIndexer.DocEntry</description>
        </attribute>
        <attribute mode="IN" name="docsToRemove" type="Collection" optional="true">
            <description>Collection of EntityIndexer.Entry</description>
        </attribute>
        <attribute mode="IN" name="refEntries" type="Collection" optional="true">
            <description>Collection of the original entity primary key PKs that triggered this consume, before expansion, for error handling</description>
        </attribute>
    </service>

    <service name="productIndexingConsumer" engine="interface">
        <implements service="entityIndexingConsumer"/>
        <attribute mode="IN" name="docs" type="Collection" optional="true">
            <description>Collection of ProductIndexer.ProductDocEntry</description>
        </attribute>
        <attribute mode="IN" name="docsToRemove" type="Collection" optional="true">
            <description>Collection of ProductIndexer.ProductEntry</description>
        </attribute>
    </service>

</services>
